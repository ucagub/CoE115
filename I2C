/*
 * File:   lab6.c
 * Author: sago
 *
 * Created on March 6, 2017, 4:42 PM
 */

#include "xc.h"
#include <stdlib.h>
#include <libpic30.h>
#include <string.h>

#define final 498

/* if PIC24FJ64GA002
#pragma config FWDTEN=OFF, JTAGEN=OFF
#pragma config POSCMOD=NONE, OSCIOFNC=ON, FCKSM=CSDCMD, FNOSC=FRCPLL 
#pragma config I2C1SEL=PRI
*/

/* else if PIC24FJ64GB002*/
#pragma config FWDTEN=OFF, JTAGEN=OFF
#pragma config POSCMOD=NONE, OSCIOFNC=ON, FCKSM=CSDCMD, FNOSC=FRCPLL 
#pragma config PLL96MHZ=OFF, PLLDIV=NODIV
#pragma config SOSCSEL=SOSC
#pragma config I2C1SEL=PRI 

/* else if PIC24FJ64GA202
#pragma config FWDTEN=OFF, JTAGEN=OFF
#pragma config POSCMD=NONE, OSCIOFCN=ON, FCKSM=CSDCMD, FNOSC=FRC 
#pragma config PLLDIV=DISABLED
#pragma config SOSCSEL=ON
#pragma config I2C1SEL=DISABLE
*/


#define BUFMAX 32

void __attribute__((interrupt, auto_psv)) _MI2C1Interrupt(void);

void i2c_init(void);
void i2c_start(void);
void i2c_stop(void);
void i2c_tx(int data);
int i2c_rx(void);
void wait_idle(void);
void delay (long millisecs);
void delay_ko(int);
unsigned long hash(char *str);

// data vars
char indata[] = "CoE_115";
char outdata[BUFMAX]; 

// flags
int idle = 1;
int acked = 0;
int rx_complete = 0;
int tx_complete = 0;

int ind;
unsigned long temp = 0;
unsigned long temp2 = 0;
int main(void) {

    
    int disp_data = 1;
    i2c_init();
    
    /* Write to EEPROM
     * Store "CoE_115" in address 0x1000 of the EEPROM 
     */
    // send I2C start sequence
    i2c_start();
    
    // send EEPROM CTRL byte with Write enabled
    i2c_tx(0b10100000);
    
    // send EEPROM high address
    i2c_tx(0x10);
    // send EEPROM low address
    i2c_tx(0x00);
    // send actual data; 
    for(ind=0;ind<=strlen(indata);ind++){
        i2c_tx(indata[ind]);
    }
    // send I2C stop sequence
    
    i2c_stop();
    
    delay(5); //5ms delay
    
    /* Read from EEPROM
     * Get data written previously in the EEPROM
     */
    
    // send I2C start sequence
    i2c_start();
    
    // send EEPROM CTRL byte with Write enabled
    I2C1TRN=0b10100000;
    
    // send EEPROM high address
    i2c_tx(0x01);
    
    // send EEPROM low address
    i2c_tx(0x40);
    // send EEPROM CTRL byte with Read enabled
    i2c_tx(0b10100001);
    /*
    // receive data
    disp_data=i2c_rx();
    // send ACK, but not on last byte
     * */
    
        
    ind = 0;
    while(disp_data) {
        // receive data
        disp_data=i2c_rx();
        outdata[ind] = disp_data;
        ind++;
        
        if(disp_data>0){
           I2C1CONbits.ACKEN=1;
        }
        
    }
    // send I2C stop sequence
    i2c_stop();     
    temp = hash(outdata);
    
    
    while(1){
        // Display data
        
        int shift;
        for(shift=28;shift>=0;shift=shift-4){
            temp2 = temp >> shift;
            temp2 = temp2 & 0x000F;
            LATB = LATB & 0xFFF0;
            LATB = LATB | temp2;
            delay(500);
            LATB = LATB & 0xFFF0;
            LATB=LATB|0xF;
            delay(500);
        }
        
    }
    
    return 0;
}

void __attribute__((interrupt, auto_psv)) _MI2C1Interrupt(void){
    
   
    if (!I2C1STATbits.ACKSTAT){  
        acked = 1;
    }
    
    if (I2C1STATbits.RBF){      
        rx_complete = 1;
    }
    
    if (!I2C1STATbits.TBF){     
        tx_complete = 1;
    }
    if (!I2C1STATbits.IWCOL || !I2C1STATbits.BCL){    
        idle = 1;
    }   
    
    // Clear I2C interrupt flag
    IFS1bits.MI2C1IF=0;
}

void reset_flags(){
    idle = 1;
    tx_complete = 0;
    rx_complete = 0;
    acked = 0;
}

void wait_idle(){
    while (!idle){
        // do nothing, just wait
    }
    reset_flags();
}

void delay (long millisecs) {
    // implement delay
    int count;
    int count2;
    for (count2 = 0; count2 < millisecs; count2++){
        for (count = 0; count < final; count++){
        ;
        ;
        }
    }
    ;
}

void i2c_start(){
    //wait until free
    wait_idle();
    //initiate start condition on SDA and SCL pins
    I2C1CONbits.SEN=1;
}

void i2c_stop(){
    //wait until free
    wait_idle();
    //initiate stop condition on SDA and SCL pins
    I2C1CONbits.PEN=1;
}

void i2c_init(void){
    // Configure GPIOs
    TRISB=0xFFF0;
    // ##### Interrupt-driven I2C configuration ########
    // enable I2C interrupts
    IEC1bits.MI2C1IE=1;
    // clear interrupt flag for I2C
    IFS1bits.MI2C1IF=0;
    // ##### I2C configuration #########################
    // refer to notes in Lab06 specs
    I2C1CONbits.I2CSIDL=1;
    I2C1CONbits.ACKDT=0;
    I2C1BRG=4;
    // enable I2C module
    I2C1CONbits.I2CEN=1;
}

void i2c_tx(int data){
    // wait until free
    wait_idle();
    // set flag to declare you're not free/idle
    idle=0;
    // load data for transmission over the I2C bus
    I2C1TRN=data;
    // wait until TX is complete
    while(!tx_complete);
    // wait until ACK is received
    while(!acked);
    // reset flags
    reset_flags();
}

int i2c_rx(){
    
    int temp = 0;
 
    // The lower 5 bits of I2CxCON must be '0' before attempting to set the RCEN bit. 
    // This ensures the master logic is inactive.
    I2C1CONbits.ACKEN=0;
    I2C1CONbits.RCEN=0;
    I2C1CONbits.PEN=0;
    I2C1CONbits.RSEN=0;
    I2C1CONbits.SEN=0;
    // enable RX mode   
    I2C1CONbits.RCEN=1;
    // wait until free
    wait_idle();
    // set flag to declare you're not free/idle
    idle=0;
    // wait until RX is complete
    while(!rx_complete);
    // get our data, store in temp
    temp=I2C1RCV;
    // reset flags
    reset_flags();
    return temp;
}

unsigned long hash(char *str){
        
    unsigned long hash = 5381;
    int c;

    // djb2 hash algorithm
    while (c = *str++)
        hash = ((hash << 5) + hash) + c; 

    return hash;
}

void delay_ko(int time) {
    int i = 0xFF;
    while(time>0){
        while(i>0){
            i--;
        }
        i = 0xFF;
        time --;
    }
}
